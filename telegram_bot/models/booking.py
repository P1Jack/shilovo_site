from dataclasses import dataclass
from datetime import datetime
from typing import Optional
from config import get_moscow_time

@dataclass
class Booking:
    """–ú–æ–¥–µ–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    
    id: int
    plot_id: int
    plot_title: str
    plot_price: float
    plot_area: str
    plot_location: str
    status: str
    created_at: str
    expires_at: Optional[str] = None
    customer_name: Optional[str] = None
    customer_phone: Optional[str] = None
    customer_email: Optional[str] = None
    
    @property
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.expires_at:
            return False
            
        try:
            expires_datetime = datetime.fromisoformat(
                self.expires_at.replace('Z', '+00:00')
            )
            current_time = datetime.now(expires_datetime.tzinfo)
            return current_time > expires_datetime
        except:
            return False
    
    @property
    def formatted_info(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
        status_emoji = self.get_status_emoji()
        
        text = f"""
üìã <b>–ë—Ä–æ–Ω—å #{self.id}</b>

üèû <b>–£—á–∞—Å—Ç–æ–∫:</b> {self.plot_title}
üí∞ <b>–¶–µ–Ω–∞:</b> {self.plot_price:,.0f} —Ä—É–±.
üìè <b>–ü–ª–æ—â–∞–¥—å:</b> {self.plot_area}
üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {self.plot_location}

üïê <b>–°–æ–∑–¥–∞–Ω–∞:</b> {self.format_date(self.created_at)}
        """
        
        if self.expires_at:
            text += f"\n‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {self.format_date(self.expires_at)}"
        
        text += f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {self.status.title()}"
        
        return text.strip()
    
    def get_status_emoji(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        emoji_map = {
            'pending': '‚è≥',
            'confirmed': '‚úÖ',
            'rejected': '‚ùå',
            'completed': 'üèÅ',
            'cancelled': 'üö´'
        }
        return emoji_map.get(self.status, 'üìù')
    
    @staticmethod
    def format_date(date_string: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            dt = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
            moscow_dt = dt.astimezone(pytz.timezone('Europe/Moscow'))
            return moscow_dt.strftime('%d.%m.%Y %H:%M')
        except:
            return date_string
