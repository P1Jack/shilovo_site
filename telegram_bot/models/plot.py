from dataclasses import dataclass
from typing import Optional, List

@dataclass
class Plot:
    """–ú–æ–¥–µ–ª—å –∑–µ–º–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"""
    
    id: int
    title: str
    price: float
    area: str
    location: str
    description: str
    status: str  # available, booked, sold
    images: List[str]
    features: List[str]
    
    @property
    def formatted_info(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∫–µ"""
        text = f"""
üèû <b>{self.title}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {self.price:,.0f} —Ä—É–±.
üìè <b>–ü–ª–æ—â–∞–¥—å:</b> {self.area}
üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {self.location}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{self.description}
        """
        
        if self.features:
            text += f"\n‚ö° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n" + "\n".join([f"‚Ä¢ {feature}" for feature in self.features])
        
        text += f"\n\n<b>–°—Ç–∞—Ç—É—Å:</b> {self.get_status_emoji()} {self.status.title()}"
        
        return text.strip()
    
    def get_status_emoji(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        emoji_map = {
            'available': '‚úÖ',
            'booked': '‚è≥',
            'sold': 'üèÅ'
        }
        return emoji_map.get(self.status, 'üìù')
    
    @property
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —É—á–∞—Å—Ç–æ–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self.status == 'available'
