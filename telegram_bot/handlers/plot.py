from telegram import Update
from telegram.ext import ContextTypes
import logging
from services.booking_service import booking_service
from keyboards import get_plots_keyboard, get_plot_detail_keyboard, get_back_to_menu_keyboard

logger = logging.getLogger(__name__)

async def show_plots_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
    """
    await update.message.reply_text(
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–∞–ª–æ–≥ —É—á–∞—Å—Ç–∫–æ–≤...",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    plots = await booking_service.get_available_plots()
    
    if not plots:
        await update.message.reply_text(
            "üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    context.user_data['current_plots'] = plots
    context.user_data['current_plots_page'] = 0
    
    message_text = f"üèû <b>–ö–∞—Ç–∞–ª–æ–≥ —É—á–∞—Å—Ç–∫–æ–≤</b>\n\n–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–∫–æ–≤: {len(plots)}"
    
    await update.message.reply_text(
        message_text,
        reply_markup=get_plots_keyboard(plots, 0),
        parse_mode='HTML'
    )

async def show_plot_detail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∫–µ
    """
    query = update.callback_query
    await query.answer()
    
    plot_id = int(query.data.split('_')[1])
    
    # –ò—â–µ–º —É—á–∞—Å—Ç–æ–∫ –≤ –∫–µ—à–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ API
    plots = context.user_data.get('current_plots', [])
    plot = next((p for p in plots if p.id == plot_id), None)
    
    if not plot:
        plot = await booking_service.get_plot_detail(plot_id)
    
    if not plot:
        await query.edit_message_text("‚ùå –£—á–∞—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    detailed_info = plot.formatted_info
    
    await query.edit_message_text(
        detailed_info,
        reply_markup=get_plot_detail_keyboard(plot.id),
        parse_mode='HTML'
    )

async def start_booking_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–∫–∞
    """
    query = update.callback_query
    await query.answer()
    
    plot_id = int(query.data.split('_')[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—á–∞—Å—Ç–∫–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['booking_plot_id'] = plot_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∫–µ
    plot = await booking_service.get_plot_detail(plot_id)
    
    if not plot:
        await query.edit_message_text("‚ùå –£—á–∞—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not plot.is_available:
        await query.edit_message_text("üòî –≠—Ç–æ—Ç —É—á–∞—Å—Ç–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    booking_text = f"""
üìã <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞</b>

üèû <b>–£—á–∞—Å—Ç–æ–∫:</b> {plot.title}
üí∞ <b>–¶–µ–Ω–∞:</b> {plot.price:,} —Ä—É–±.
üìè <b>–ü–ª–æ—â–∞–¥—å:</b> {plot.area}
üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {plot.location}

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω:
    """
    
    from keyboards import get_contact_keyboard
    await query.edit_message_text(
        booking_text,
        reply_markup=get_contact_keyboard(),
        parse_mode='HTML'
    )

async def handle_plots_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —É—á–∞—Å—Ç–∫–æ–≤
    """
    query = update.callback_query
    await query.answer()
    
    page = int(query.data.split('_')[2])
    plots = context.user_data.get('current_plots', [])
    
    context.user_data['current_plots_page'] = page
    
    message_text = f"üèû <b>–ö–∞—Ç–∞–ª–æ–≥ —É—á–∞—Å—Ç–∫–æ–≤</b>\n\n–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–∫–æ–≤: {len(plots)}"
    
    await query.edit_message_text(
        message_text,
        reply_markup=get_plots_keyboard(plots, page),
        parse_mode='HTML'
    )

async def refresh_plots(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–∫–æ–≤
    """
    query = update.callback_query
    await query.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")
    
    await show_plots_catalog_from_query(query, context)

async def show_plots_catalog_from_query(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ callback query
    """
    plots = await booking_service.get_available_plots()
    
    if not plots:
        await query.edit_message_text(
            "üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤."
        )
        return
    
    context.user_data['current_plots'] = plots
    context.user_data['current_plots_page'] = 0
    
    message_text = f"üèû <b>–ö–∞—Ç–∞–ª–æ–≥ —É—á–∞—Å—Ç–∫–æ–≤</b>\n\n–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–∫–æ–≤: {len(plots)}"
    
    await query.edit_message_text(
        message_text,
        reply_markup=get_plots_keyboard(plots, 0),
        parse_mode='HTML'
    )

async def back_to_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É —É—á–∞—Å—Ç–∫–æ–≤
    """
    query = update.callback_query
    await query.answer()
    
    await show_plots_catalog_from_query(query, context)
