from telegram import Update
from telegram.ext import ContextTypes
import logging
from services.booking_service import booking_service
from services.notification import notification_service
from keyboards import get_bookings_keyboard, get_booking_detail_keyboard, get_confirmation_keyboard, get_back_to_menu_keyboard

logger = logging.getLogger(__name__)

async def show_user_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user = update.effective_user
    
    await update.message.reply_text(
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    bookings = await booking_service.get_user_bookings(user.id)
    
    if not bookings:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥ —É—á–∞—Å—Ç–∫–æ–≤ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—É—é –±—Ä–æ–Ω—å! üèû",
            reply_markup=get_back_to_menu_keyboard()
        )
        return
    
    context.user_data['current_bookings'] = bookings
    context.user_data['current_bookings_page'] = 0
    
    message_text = f"üìã <b>–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n–ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–µ–π: {len(bookings)}"
    
    await update.message.reply_text(
        message_text,
        reply_markup=get_bookings_keyboard(bookings, 0),
        parse_mode='HTML'
    )

async def show_booking_detail(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏
    """
    query = update.callback_query
    await query.answer()
    
    booking_id = int(query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    bookings = context.user_data.get('current_bookings', [])
    booking = next((b for b in bookings if b.id == booking_id), None)
    
    if not booking:
        await query.edit_message_text("‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    detailed_info = booking.formatted_info
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è pending –±—Ä–æ–Ω–µ–π
    if booking.status == 'pending':
        await query.edit_message_text(
            detailed_info,
            reply_markup=get_booking_detail_keyboard(booking.id),
            parse_mode='HTML'
        )
    else:
        await query.edit_message_text(
            detailed_info,
            parse_mode='HTML'
        )

async def start_cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏
    """
    query = update.callback_query
    await query.answer()
    
    booking_id = int(query.data.split('_')[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±—Ä–æ–Ω–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    context.user_data['cancelling_booking_id'] = booking_id
    
    confirmation_text = """
üö´ <b>–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –±—Ä–æ–Ω—å?

–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —É—á–∞—Å—Ç–æ–∫ —Å–Ω–æ–≤–∞, 
–µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω.
    """
    
    await query.edit_message_text(
        confirmation_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode='HTML'
    )

async def confirm_cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–º–µ–Ω—É –±—Ä–æ–Ω–∏
    """
    query = update.callback_query
    await query.answer()
    
    booking_id = context.user_data.get('cancelling_booking_id')
    user = query.from_user
    
    if not booking_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –±—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å
    success = await booking_service.cancel_booking(booking_id)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        bookings = context.user_data.get('current_bookings', [])
        booking = next((b for b in bookings if b.id == booking_id), None)
        
        if booking:
            await notification_service.notify_booking_cancelled(booking)
        
        success_text = f"‚úÖ –ë—Ä–æ–Ω—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!"
    else:
        success_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await query.edit_message_text(success_text)
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('cancelling_booking_id', None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π
    await show_user_bookings_from_query(query, context)

async def handle_bookings_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å–ø–∏—Å–∫–µ –±—Ä–æ–Ω–µ–π
    """
    query = update.callback_query
    await query.answer()
    
    page = int(query.data.split('_')[2])
    bookings = context.user_data.get('current_bookings', [])
    
    context.user_data['current_bookings_page'] = page
    
    message_text = f"üìã <b>–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n–ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–µ–π: {len(bookings)}"
    
    await query.edit_message_text(
        message_text,
        reply_markup=get_bookings_keyboard(bookings, page),
        parse_mode='HTML'
    )

async def refresh_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π
    """
    query = update.callback_query
    await query.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é...")
    
    await show_user_bookings_from_query(query, context)

async def show_user_bookings_from_query(query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –±—Ä–æ–Ω–µ–π –∏–∑ callback query
    """
    user = query.from_user
    bookings = await booking_service.get_user_bookings(user.id)
    
    if not bookings:
        await query.edit_message_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
        )
        return
    
    context.user_data['current_bookings'] = bookings
    context.user_data['current_bookings_page'] = 0
    
    message_text = f"üìã <b>–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n–ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–µ–π: {len(bookings)}"
    
    await query.edit_message_text(
        message_text,
        reply_markup=get_bookings_keyboard(bookings, 0),
        parse_mode='HTML'
    )

async def back_to_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –±—Ä–æ–Ω–µ–π
    """
    query = update.callback_query
    await query.answer()
    
    await show_user_bookings_from_query(query, context)
