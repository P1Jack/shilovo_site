from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
import logging
from config import States
from services.booking_service import booking_service
from services.notification import notification_service
from keyboards import get_main_menu_keyboard, get_back_to_menu_keyboard

logger = logging.getLogger(__name__)

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç –±—Ä–æ–Ω—å
    """
    user = update.effective_user
    contact = update.message.contact
    
    if not contact:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üì±",
            reply_markup=get_back_to_menu_keyboard()
        )
        return States.WAITING_CONTACT
    
    plot_id = context.user_data.get('booking_plot_id')
    
    if not plot_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —É—á–∞—Å—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'user_id': user.id,
        'name': user.first_name,
        'phone': contact.phone_number,
        'email': f"{user.username}@telegram" if user.username else "not_provided@telegram"
    }
    
    # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    booking = await booking_service.create_booking(plot_id, user_data)
    
    if booking:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notification_service.notify_booking_created(booking)
        
        success_text = f"""
üéâ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>

üìã <b>–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏:</b> #{booking.id}
üèû <b>–£—á–∞—Å—Ç–æ–∫:</b> {booking.plot_title}
üí∞ <b>–¶–µ–Ω–∞:</b> {booking.plot_price:,} —Ä—É–±.

‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üìã –ú–æ–∏ –±—Ä–æ–Ω–∏"
        """
        
        await update.message.reply_text(
            success_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode='HTML'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏
        logger.info(f"‚úÖ Booking {booking.id} created for user {user.id}")
        
    else:
        error_text = """
‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:

üìû +7 (999) 123-45-67
        """
        
        await update.message.reply_text(
            error_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode='HTML'
        )
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('booking_plot_id', None)
    
    return ConversationHandler.END

async def cancel_booking_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.pop('booking_plot_id', None)
    
    await update.message.reply_text(
        "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_menu_keyboard()
    )
    
    return ConversationHandler.END
