import logging
from typing import Optional
from models.booking import Booking
from models.plot import Plot

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.logger = logger
    
    async def notify_booking_created(self, booking: Booking) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏"""
        try:
            self.logger.info(f"üìã Booking {booking.id} created for user")
            
            # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            print(f"""
üìß –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–û–ö–£–ü–ê–¢–ï–õ–Æ:
–ë—Ä–æ–Ω—å #{booking.id} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

–£—á–∞—Å—Ç–æ–∫: {booking.plot_title}
–¶–µ–Ω–∞: {booking.plot_price} —Ä—É–±.
–°—Ç–∞—Ç—É—Å: {booking.status}

–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
            """)
            
            return True
        except Exception as e:
            self.logger.error(f"Error sending booking notification: {e}")
            return False
    
    async def notify_booking_confirmed(self, booking: Booking) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏"""
        try:
            self.logger.info(f"‚úÖ Booking {booking.id} confirmed")
            
            print(f"""
üéâ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–û–ö–£–ü–ê–¢–ï–õ–Æ:
–ë—Ä–æ–Ω—å #{booking.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

–£—á–∞—Å—Ç–æ–∫: {booking.plot_title} 
–¶–µ–Ω–∞: {booking.plot_price} —Ä—É–±.

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
            """)
            
            return True
        except Exception as e:
            self.logger.error(f"Error sending confirmation notification: {e}")
            return False
    
    async def notify_booking_cancelled(self, booking: Booking) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏"""
        try:
            self.logger.info(f"üö´ Booking {booking.id} cancelled")
            
            print(f"""
üìù –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–û–ö–£–ü–ê–¢–ï–õ–Æ:
–ë—Ä–æ–Ω—å #{booking.id} –æ—Ç–º–µ–Ω–µ–Ω–∞.

–£—á–∞—Å—Ç–æ–∫: {booking.plot_title}
            """)
            
            return True
        except Exception as e:
            self.logger.error(f"Error sending cancellation notification: {e}")
            return False
    
    async def notify_new_plots_available(self, plots: list, user_ids: list) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö"""
        try:
            self.logger.info(f"üîî Notifying about {len(plots)} new plots")
            
            for plot in plots:
                print(f"""
üèû –ù–û–í–´–ô –£–ß–ê–°–¢–û–ö –î–û–°–¢–£–ü–ï–ù:
{plot.title}
–¶–µ–Ω–∞: {plot.price} —Ä—É–±.
–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {plot.location}
                """)
            
            return True
        except Exception as e:
            self.logger.error(f"Error sending new plots notification: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService()
